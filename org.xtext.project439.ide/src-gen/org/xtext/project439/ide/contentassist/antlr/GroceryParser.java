/*
 * generated by Xtext 2.15.0
 */
package org.xtext.project439.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.project439.ide.contentassist.antlr.internal.InternalGroceryParser;
import org.xtext.project439.services.GroceryGrammarAccess;

public class GroceryParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GroceryGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GroceryGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBuildingAccess().getAlternatives(), "rule__Building__Alternatives");
			builder.put(grammarAccess.getDeliveryElementAccess().getAlternatives(), "rule__DeliveryElement__Alternatives");
			builder.put(grammarAccess.getItemAccess().getAlternatives(), "rule__Item__Alternatives");
			builder.put(grammarAccess.getGroceryAccess().getGroup(), "rule__Grocery__Group__0");
			builder.put(grammarAccess.getStoreAccess().getGroup(), "rule__Store__Group__0");
			builder.put(grammarAccess.getWarehouseAccess().getGroup(), "rule__Warehouse__Group__0");
			builder.put(grammarAccess.getShelfAccess().getGroup(), "rule__Shelf__Group__0");
			builder.put(grammarAccess.getBackroomAccess().getGroup(), "rule__Backroom__Group__0");
			builder.put(grammarAccess.getNonPerishableItemAccess().getGroup(), "rule__NonPerishableItem__Group__0");
			builder.put(grammarAccess.getPerishableItemAccess().getGroup(), "rule__PerishableItem__Group__0");
			builder.put(grammarAccess.getAddressAccess().getGroup(), "rule__Address__Group__0");
			builder.put(grammarAccess.getExperationDateAccess().getGroup(), "rule__ExperationDate__Group__0");
			builder.put(grammarAccess.getDriverAccess().getGroup(), "rule__Driver__Group__0");
			builder.put(grammarAccess.getVehicleAccess().getGroup(), "rule__Vehicle__Group__0");
			builder.put(grammarAccess.getGroceryAccess().getElementsAssignment_0(), "rule__Grocery__ElementsAssignment_0");
			builder.put(grammarAccess.getGroceryAccess().getElementsAssignment_1(), "rule__Grocery__ElementsAssignment_1");
			builder.put(grammarAccess.getStoreAccess().getNameAssignment_1(), "rule__Store__NameAssignment_1");
			builder.put(grammarAccess.getStoreAccess().getElementsAssignment_3(), "rule__Store__ElementsAssignment_3");
			builder.put(grammarAccess.getStoreAccess().getElementsAssignment_4(), "rule__Store__ElementsAssignment_4");
			builder.put(grammarAccess.getWarehouseAccess().getNameAssignment_0(), "rule__Warehouse__NameAssignment_0");
			builder.put(grammarAccess.getWarehouseAccess().getAddressAssignment_1(), "rule__Warehouse__AddressAssignment_1");
			builder.put(grammarAccess.getWarehouseAccess().getElementsAssignment_3(), "rule__Warehouse__ElementsAssignment_3");
			builder.put(grammarAccess.getShelfAccess().getNameAssignment_1(), "rule__Shelf__NameAssignment_1");
			builder.put(grammarAccess.getShelfAccess().getElementsAssignment_2(), "rule__Shelf__ElementsAssignment_2");
			builder.put(grammarAccess.getBackroomAccess().getNameAssignment_1(), "rule__Backroom__NameAssignment_1");
			builder.put(grammarAccess.getBackroomAccess().getElementsAssignment_2(), "rule__Backroom__ElementsAssignment_2");
			builder.put(grammarAccess.getNonPerishableItemAccess().getNameAssignment_1(), "rule__NonPerishableItem__NameAssignment_1");
			builder.put(grammarAccess.getNonPerishableItemAccess().getPriceAssignment_2(), "rule__NonPerishableItem__PriceAssignment_2");
			builder.put(grammarAccess.getPerishableItemAccess().getNameAssignment_1(), "rule__PerishableItem__NameAssignment_1");
			builder.put(grammarAccess.getPerishableItemAccess().getExperationDateAssignment_2(), "rule__PerishableItem__ExperationDateAssignment_2");
			builder.put(grammarAccess.getAddressAccess().getStreetAssignment_1(), "rule__Address__StreetAssignment_1");
			builder.put(grammarAccess.getAddressAccess().getNumberAssignment_3(), "rule__Address__NumberAssignment_3");
			builder.put(grammarAccess.getAddressAccess().getCityAssignment_5(), "rule__Address__CityAssignment_5");
			builder.put(grammarAccess.getExperationDateAccess().getMonthAssignment_1(), "rule__ExperationDate__MonthAssignment_1");
			builder.put(grammarAccess.getExperationDateAccess().getDayAssignment_3(), "rule__ExperationDate__DayAssignment_3");
			builder.put(grammarAccess.getExperationDateAccess().getYearAssignment_5(), "rule__ExperationDate__YearAssignment_5");
			builder.put(grammarAccess.getDriverAccess().getNameAssignment_1(), "rule__Driver__NameAssignment_1");
			builder.put(grammarAccess.getVehicleAccess().getNameAssignment_1(), "rule__Vehicle__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GroceryGrammarAccess grammarAccess;

	@Override
	protected InternalGroceryParser createParser() {
		InternalGroceryParser result = new InternalGroceryParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GroceryGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GroceryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
