/*
 * generated by Xtext 2.15.0
 */
package org.xtext.project439.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GroceryGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GroceryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.Grocery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsBuildingParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsDeliveryElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Grocery:
		//	elements+=Building* elements+=DeliveryElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Building* elements+=DeliveryElement*
		public Group getGroup() { return cGroup; }
		
		//elements+=Building*
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//Building
		public RuleCall getElementsBuildingParserRuleCall_0_0() { return cElementsBuildingParserRuleCall_0_0; }
		
		//elements+=DeliveryElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//DeliveryElement
		public RuleCall getElementsDeliveryElementParserRuleCall_1_0() { return cElementsDeliveryElementParserRuleCall_1_0; }
	}
	public class BuildingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.Building");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStoreParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWarehouseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Building:
		//	Store | Warehouse;
		@Override public ParserRule getRule() { return rule; }
		
		//Store | Warehouse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Store
		public RuleCall getStoreParserRuleCall_0() { return cStoreParserRuleCall_0; }
		
		//Warehouse
		public RuleCall getWarehouseParserRuleCall_1() { return cWarehouseParserRuleCall_1; }
	}
	public class DeliveryElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.DeliveryElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDriverParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVehicleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DeliveryElement:
		//	Driver | Vehicle;
		@Override public ParserRule getRule() { return rule; }
		
		//Driver | Vehicle
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Driver
		public RuleCall getDriverParserRuleCall_0() { return cDriverParserRuleCall_0; }
		
		//Vehicle
		public RuleCall getVehicleParserRuleCall_1() { return cVehicleParserRuleCall_1; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.Store");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsShelfParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsBackroomParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Store:
		//	'store' name=ID '{'
		//	elements+=Shelf* elements+=Backroom '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'store' name=ID '{' elements+=Shelf* elements+=Backroom '}'
		public Group getGroup() { return cGroup; }
		
		//'store'
		public Keyword getStoreKeyword_0() { return cStoreKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=Shelf*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Shelf
		public RuleCall getElementsShelfParserRuleCall_3_0() { return cElementsShelfParserRuleCall_3_0; }
		
		//elements+=Backroom
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//Backroom
		public RuleCall getElementsBackroomParserRuleCall_4_0() { return cElementsBackroomParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class WarehouseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.Warehouse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAddressAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAddressAddressParserRuleCall_1_0 = (RuleCall)cAddressAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsItemParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Warehouse:
		//	name=ID address+=Address '{'
		//	elements+=Item*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID address+=Address '{' elements+=Item* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//address+=Address
		public Assignment getAddressAssignment_1() { return cAddressAssignment_1; }
		
		//Address
		public RuleCall getAddressAddressParserRuleCall_1_0() { return cAddressAddressParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=Item*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Item
		public RuleCall getElementsItemParserRuleCall_3_0() { return cElementsItemParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ShelfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.Shelf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsItemParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Shelf:
		//	'shelf' name=ID elements+=Item*;
		@Override public ParserRule getRule() { return rule; }
		
		//'shelf' name=ID elements+=Item*
		public Group getGroup() { return cGroup; }
		
		//'shelf'
		public Keyword getShelfKeyword_0() { return cShelfKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//elements+=Item*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Item
		public RuleCall getElementsItemParserRuleCall_2_0() { return cElementsItemParserRuleCall_2_0; }
	}
	public class BackroomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.Backroom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackroomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsItemParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Backroom:
		//	'backroom' name=ID elements+=Item*;
		@Override public ParserRule getRule() { return rule; }
		
		//'backroom' name=ID elements+=Item*
		public Group getGroup() { return cGroup; }
		
		//'backroom'
		public Keyword getBackroomKeyword_0() { return cBackroomKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//elements+=Item*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Item
		public RuleCall getElementsItemParserRuleCall_2_0() { return cElementsItemParserRuleCall_2_0; }
	}
	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.Item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPerishableItemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonPerishableItemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Item:
		//	PerishableItem | NonPerishableItem;
		@Override public ParserRule getRule() { return rule; }
		
		//PerishableItem | NonPerishableItem
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PerishableItem
		public RuleCall getPerishableItemParserRuleCall_0() { return cPerishableItemParserRuleCall_0; }
		
		//NonPerishableItem
		public RuleCall getNonPerishableItemParserRuleCall_1() { return cNonPerishableItemParserRuleCall_1; }
	}
	public class NonPerishableItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.NonPerishableItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNonPerishableItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPriceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPriceINTTerminalRuleCall_2_0 = (RuleCall)cPriceAssignment_2.eContents().get(0);
		
		//NonPerishableItem:
		//	'nonPerishableItem' name=ID price=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'nonPerishableItem' name=ID price=INT
		public Group getGroup() { return cGroup; }
		
		//'nonPerishableItem'
		public Keyword getNonPerishableItemKeyword_0() { return cNonPerishableItemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//price=INT
		public Assignment getPriceAssignment_2() { return cPriceAssignment_2; }
		
		//INT
		public RuleCall getPriceINTTerminalRuleCall_2_0() { return cPriceINTTerminalRuleCall_2_0; }
	}
	public class PerishableItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.PerishableItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPerishableItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExperationDateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExperationDateExperationDateParserRuleCall_2_0 = (RuleCall)cExperationDateAssignment_2.eContents().get(0);
		
		//PerishableItem:
		//	'perishableItem' name=ID experationDate+=ExperationDate;
		@Override public ParserRule getRule() { return rule; }
		
		//'perishableItem' name=ID experationDate+=ExperationDate
		public Group getGroup() { return cGroup; }
		
		//'perishableItem'
		public Keyword getPerishableItemKeyword_0() { return cPerishableItemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//experationDate+=ExperationDate
		public Assignment getExperationDateAssignment_2() { return cExperationDateAssignment_2; }
		
		//ExperationDate
		public RuleCall getExperationDateExperationDateParserRuleCall_2_0() { return cExperationDateExperationDateParserRuleCall_2_0; }
	}
	public class AddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.Address");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStreetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStreetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStreetSTRINGTerminalRuleCall_1_0 = (RuleCall)cStreetAssignment_1.eContents().get(0);
		private final Keyword cNumberKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNumberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNumberINTTerminalRuleCall_3_0 = (RuleCall)cNumberAssignment_3.eContents().get(0);
		private final Keyword cCityKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCitySTRINGTerminalRuleCall_5_0 = (RuleCall)cCityAssignment_5.eContents().get(0);
		
		//Address:
		//	'street' street=STRING 'number' number=INT 'city' city=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'street' street=STRING 'number' number=INT 'city' city=STRING
		public Group getGroup() { return cGroup; }
		
		//'street'
		public Keyword getStreetKeyword_0() { return cStreetKeyword_0; }
		
		//street=STRING
		public Assignment getStreetAssignment_1() { return cStreetAssignment_1; }
		
		//STRING
		public RuleCall getStreetSTRINGTerminalRuleCall_1_0() { return cStreetSTRINGTerminalRuleCall_1_0; }
		
		//'number'
		public Keyword getNumberKeyword_2() { return cNumberKeyword_2; }
		
		//number=INT
		public Assignment getNumberAssignment_3() { return cNumberAssignment_3; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_3_0() { return cNumberINTTerminalRuleCall_3_0; }
		
		//'city'
		public Keyword getCityKeyword_4() { return cCityKeyword_4; }
		
		//city=STRING
		public Assignment getCityAssignment_5() { return cCityAssignment_5; }
		
		//STRING
		public RuleCall getCitySTRINGTerminalRuleCall_5_0() { return cCitySTRINGTerminalRuleCall_5_0; }
	}
	public class ExperationDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.ExperationDate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMonthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMonthINTTerminalRuleCall_1_0 = (RuleCall)cMonthAssignment_1.eContents().get(0);
		private final Keyword cDayKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDayAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDayINTTerminalRuleCall_3_0 = (RuleCall)cDayAssignment_3.eContents().get(0);
		private final Keyword cYearKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYearAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYearINTTerminalRuleCall_5_0 = (RuleCall)cYearAssignment_5.eContents().get(0);
		
		//ExperationDate:
		//	'month' month=INT 'day' day=INT 'year' year=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'month' month=INT 'day' day=INT 'year' year=INT
		public Group getGroup() { return cGroup; }
		
		//'month'
		public Keyword getMonthKeyword_0() { return cMonthKeyword_0; }
		
		//month=INT
		public Assignment getMonthAssignment_1() { return cMonthAssignment_1; }
		
		//INT
		public RuleCall getMonthINTTerminalRuleCall_1_0() { return cMonthINTTerminalRuleCall_1_0; }
		
		//'day'
		public Keyword getDayKeyword_2() { return cDayKeyword_2; }
		
		//day=INT
		public Assignment getDayAssignment_3() { return cDayAssignment_3; }
		
		//INT
		public RuleCall getDayINTTerminalRuleCall_3_0() { return cDayINTTerminalRuleCall_3_0; }
		
		//'year'
		public Keyword getYearKeyword_4() { return cYearKeyword_4; }
		
		//year=INT
		public Assignment getYearAssignment_5() { return cYearAssignment_5; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_5_0() { return cYearINTTerminalRuleCall_5_0; }
	}
	public class DriverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.Driver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDriverKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Driver:
		//	'driver' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'driver' name=ID
		public Group getGroup() { return cGroup; }
		
		//'driver'
		public Keyword getDriverKeyword_0() { return cDriverKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class VehicleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project439.Grocery.Vehicle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVehicleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Vehicle:
		//	'vehicle' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'vehicle' name=ID
		public Group getGroup() { return cGroup; }
		
		//'vehicle'
		public Keyword getVehicleKeyword_0() { return cVehicleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final GroceryElements pGrocery;
	private final BuildingElements pBuilding;
	private final DeliveryElementElements pDeliveryElement;
	private final StoreElements pStore;
	private final WarehouseElements pWarehouse;
	private final ShelfElements pShelf;
	private final BackroomElements pBackroom;
	private final ItemElements pItem;
	private final NonPerishableItemElements pNonPerishableItem;
	private final PerishableItemElements pPerishableItem;
	private final AddressElements pAddress;
	private final ExperationDateElements pExperationDate;
	private final DriverElements pDriver;
	private final VehicleElements pVehicle;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GroceryGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGrocery = new GroceryElements();
		this.pBuilding = new BuildingElements();
		this.pDeliveryElement = new DeliveryElementElements();
		this.pStore = new StoreElements();
		this.pWarehouse = new WarehouseElements();
		this.pShelf = new ShelfElements();
		this.pBackroom = new BackroomElements();
		this.pItem = new ItemElements();
		this.pNonPerishableItem = new NonPerishableItemElements();
		this.pPerishableItem = new PerishableItemElements();
		this.pAddress = new AddressElements();
		this.pExperationDate = new ExperationDateElements();
		this.pDriver = new DriverElements();
		this.pVehicle = new VehicleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.project439.Grocery".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Grocery:
	//	elements+=Building* elements+=DeliveryElement*;
	public GroceryElements getGroceryAccess() {
		return pGrocery;
	}
	
	public ParserRule getGroceryRule() {
		return getGroceryAccess().getRule();
	}
	
	//Building:
	//	Store | Warehouse;
	public BuildingElements getBuildingAccess() {
		return pBuilding;
	}
	
	public ParserRule getBuildingRule() {
		return getBuildingAccess().getRule();
	}
	
	//DeliveryElement:
	//	Driver | Vehicle;
	public DeliveryElementElements getDeliveryElementAccess() {
		return pDeliveryElement;
	}
	
	public ParserRule getDeliveryElementRule() {
		return getDeliveryElementAccess().getRule();
	}
	
	//Store:
	//	'store' name=ID '{'
	//	elements+=Shelf* elements+=Backroom '}';
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//Warehouse:
	//	name=ID address+=Address '{'
	//	elements+=Item*
	//	'}';
	public WarehouseElements getWarehouseAccess() {
		return pWarehouse;
	}
	
	public ParserRule getWarehouseRule() {
		return getWarehouseAccess().getRule();
	}
	
	//Shelf:
	//	'shelf' name=ID elements+=Item*;
	public ShelfElements getShelfAccess() {
		return pShelf;
	}
	
	public ParserRule getShelfRule() {
		return getShelfAccess().getRule();
	}
	
	//Backroom:
	//	'backroom' name=ID elements+=Item*;
	public BackroomElements getBackroomAccess() {
		return pBackroom;
	}
	
	public ParserRule getBackroomRule() {
		return getBackroomAccess().getRule();
	}
	
	//Item:
	//	PerishableItem | NonPerishableItem;
	public ItemElements getItemAccess() {
		return pItem;
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}
	
	//NonPerishableItem:
	//	'nonPerishableItem' name=ID price=INT;
	public NonPerishableItemElements getNonPerishableItemAccess() {
		return pNonPerishableItem;
	}
	
	public ParserRule getNonPerishableItemRule() {
		return getNonPerishableItemAccess().getRule();
	}
	
	//PerishableItem:
	//	'perishableItem' name=ID experationDate+=ExperationDate;
	public PerishableItemElements getPerishableItemAccess() {
		return pPerishableItem;
	}
	
	public ParserRule getPerishableItemRule() {
		return getPerishableItemAccess().getRule();
	}
	
	//Address:
	//	'street' street=STRING 'number' number=INT 'city' city=STRING;
	public AddressElements getAddressAccess() {
		return pAddress;
	}
	
	public ParserRule getAddressRule() {
		return getAddressAccess().getRule();
	}
	
	//ExperationDate:
	//	'month' month=INT 'day' day=INT 'year' year=INT;
	public ExperationDateElements getExperationDateAccess() {
		return pExperationDate;
	}
	
	public ParserRule getExperationDateRule() {
		return getExperationDateAccess().getRule();
	}
	
	//Driver:
	//	'driver' name=ID;
	public DriverElements getDriverAccess() {
		return pDriver;
	}
	
	public ParserRule getDriverRule() {
		return getDriverAccess().getRule();
	}
	
	//Vehicle:
	//	'vehicle' name=ID;
	public VehicleElements getVehicleAccess() {
		return pVehicle;
	}
	
	public ParserRule getVehicleRule() {
		return getVehicleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
